(Vue.config.devtools = !1), (Vue.config.debug = !1), (Vue.config.silent = !0), (Vue.config.ignoredElements = ['app', 'page', 'navbar', 'settings', 'splash', 'splashwrap', 'message', 'notifications', 'speedControls', 'state', 'bank', 'commodity', 'detail', 'gameover', 'listheader', 'listings', 'category', 'name', 'units', 'currentPrice', 'description', 'market', 'currentValue', 'contractSize', 'goldbacking', 'contractUnit']);
var app = new Vue({
  el: '#app',
  data: {
    version: '3.0.024',
    displayMode: 'browser tab',
    isDropping: !1,
    isStopped: !0,
    isReady: !1,
    useDarkPuck: !1,
    isSuccess: !1,
    isPlaying: !1,
    puckX: 0,
    puckY: 0,
    puckWidth: 20,
    puckHeight: 10,
    trailWidth: 20,
    trailHeight: 10,
    targetX: 0,
    targetY: 0,
    targetWidth: 100,
    targetHeight: 100,
    speed: 6,
    dropMaxCount: 3,
    dropCount: 0,
    dropTotalCount: 0,
    startingDropCount: UseDebug ? 3 : 20,
    score: 0,
    showInstructions: !0,
    showHome: !0,
    showEndGame: !0,
    showSettings: !1,
    showYesNo: !1,
    results: [],
    modes: Modes,
    currentMode: Modes[0],
    themes: Themes,
    puckElement: document.getElementsByTagName('puck')[0],
    r: document.querySelector(':root'),
    c: window.getComputedStyle(document.querySelector(':root')),
  },
  methods: {
    ReadyStage() {
      log('Ready stage');
      let t = document.getElementsByTagName('stage')[0].getBoundingClientRect();
      this.isSuccess && (this.dropCount = this.dropMaxCount - 1),
        (this.isSuccess = !1),
        (this.puckY = -this.puckHeight),
        this.dropCount++,
        this.dropCount === this.dropMaxCount && ((this.puckY = -this.puckHeight), (this.puckX = getRandomInt(this.puckWidth, (window.innerWidth < t.width ? window.innerWidth : t.width) - this.puckWidth)), (this.targetHeight = getRandomInt(20, 100)), (this.targetY = getRandomInt(100 + this.puckHeight, t.height - this.targetHeight)), (this.dropCount = 0), this.results.push(new ResultObject({ count: this.dropTotalCount, difficulty: this.currentMode.name })));
    },
    StopPuck() {
      if ((log('Stopping puck'), this.dropTotalCount > 0)) {
        this.puckElement = document.getElementsByTagName('puck')[0];
        const t = window
          .getComputedStyle(this.puckElement)
          .transform.match(/matrix.*\((.+)\)/)[1]
          .split(', ');
        this.puckY = t[5];
        let e = this.score + this.targetValue;
        Number(this.puckY) + Number(this.puckHeight) + 1 <= Number(this.targetHeight) + Number(this.targetY) + 2 && Number(this.puckY) + Number(this.puckHeight) + 1 > Number(this.targetY) && ((this.score = e), (this.isSuccess = !0));
        let s = this.results[this.results.length - 1];
        Number(this.puckY) + Number(this.puckHeight) + 1 > Number(this.targetHeight) + Number(this.targetY) + 2 ? s.deltas.push(Number(this.targetHeight) + Number(this.targetY) + 2 - Number(this.puckY) + Number(this.puckHeight) + 1) : Number(this.puckY) + Number(this.puckHeight) + 1 < Number(this.targetY) && s.deltas.push(Number(this.puckY) + Number(this.puckHeight) + 1 - Number(this.targetY)),
          (s.count = this.dropTotalCount),
          (s.attempts = this.dropCount),
          (s.success = this.isSuccess),
          (s.value = e),
          (s.ky = this.puckY),
          (s.kx = this.puckX),
          (s.kh = this.puckHeight),
          (s.ty = this.targetY),
          (s.th = this.targetHeight),
          this.dropTotalCount--,
          0 === this.dropTotalCount && ((this.showEndGame = !0), setTimeout(() => {}, 1e3));
      }
    },
    SelectMode(t) {
      log('Selecting mode: ' + t.name),
        this.isPlaying
          ? this.isPlaying && this.EndGame()
          : (log('Selected mode: ' + t.name),
            this.modes.forEach((t) => {
              t.selected = !1;
            }),
            (t.selected = !0),
            (this.trailHeight = t.height),
            (this.trailWidth = t.width),
            (this.puckHeight = t.height),
            (this.puckWidth = t.width),
            localStorage.setItem('mode', JSON.stringify(t)),
            (this.speed = t.speed),
            (this.currentMode = t));
    },
    ToggleInstructions() {
      localStorage.setItem('showInstructions', this.showInstructions);
    },
    GetHitsOn(t) {
      let e = 0;
      return (
        this.results.forEach((s) => {
          s.success && s.attempts == t && e++;
        }),
        e
      );
    },
    GetMisses() {
      let t = 0;
      return (
        this.results.forEach((e) => {
          t += e.deltas.length;
        }),
        t
      );
    },
    GetHighestPossibleScore() {
      let t = 0;
      return (
        this.results.forEach((e) => {
          let s = this.modes.find((t) => t.name === e.difficulty),
            i = parseInt(30 + (100 - Number(e.th)) * Number(this.dropMaxCount)),
            o = 481 - e.ty,
            h = i ? (parseInt(i + o) * s.speed) / this.modes[0].speed : 0;
          t += h;
        }),
        t
      );
    },
    GetMissedByDirection(t) {
      let e = 0;
      return (
        this.results.forEach((s) => {
          for (let i = 0; i < s.deltas.length; i++) {
            const o = s.deltas[i];
            o > 0 && 'below' == t && e++, o < 0 && 'above' == t && e++;
          }
        }),
        0 === this.GetMisses() ? 0 : Math.round((e / this.GetMisses()) * 100)
      );
    },
    EndGame() {
      log('Ending game'), this.results.length > 0 && 4 === this.results[this.results.length - 1].attempts && this.results.pop(), (this.showYesNo = !1), (this.showSettings = !1), (this.dropTotalCount = 0), (this.isStopped = !0), (this.isReady = !1), (this.isDropping = !1), (this.isPlaying = !1), (this.showHome = !0);
    },
    HandleActionButton(t, e) {
      t && (t.stopPropagation(), t.preventDefault()), this.showYesNo && 'quit' == e ? this.EndGame() : this.isDropping && 'stop' == e ? (this.StopPuck(), (this.showInstructions = !1), (this.isDropping = !1), (this.isStopped = !0)) : this.isStopped && 'next' == e ? (this.ReadyStage(), (this.isStopped = !1), (this.isReady = !0)) : this.isReady && 'drop' == e && ((this.isReady = !1), (this.isDropping = !0));
    },
    HandlePuckColorButtonClick(t, e) {
      t.stopPropagation(), t.preventDefault(), this.SetPuckColor(e);
    },
    SetPuckColor(t) {
      (this.useDarkPuck = t), this.r.style.setProperty('--puckLuminosity', (this.useDarkPuck ? 17 : 100) + '%'), localStorage.setItem('useDarkPuck', t);
    },
    HandleThemeButton(t, e) {
      t.stopPropagation(), t.preventDefault(), this.SelectGameTheme(e.name);
    },
    SelectGameTheme(t) {
      var e;
      log('Selecting theme: ' + t),
        this.themes.forEach((s) => {
          (s.selected = s.name == t), s.selected && (e = s);
        }),
        null == e && ((e = this.themes[1]).selected = !0),
        this.r.style.setProperty('--hue', e.h),
        this.r.style.setProperty('--saturation', e.s + '%'),
        document.getElementById('themeColor').setAttribute('content', 'hsl(' + e.h + ', ' + e.s + '%, 61%)'),
        localStorage.setItem('theme', e.name);
    },
    UpdateApp() {
      document.getElementsByTagName('stage')[0].getBoundingClientRect(), this.isDropping && !this.puckHitBottom && (this.puckY = Number(this.puckY) + this.speed);
    },
    RestartGame() {
      (this.results = []), (this.dropCount = this.dropMaxCount - 1), (this.dropTotalCount = this.startingDropCount), (this.score = 0), (this.isDropping = !1), (this.isStopped = !1), (this.isReady = !0), (this.isPlaying = !0), (this.showHome = !1), (this.showEndGame = !1), this.ReadyStage();
    },
    GetSettings() {
      if (null != localStorage.getItem('mode')) {
        var t = new ModeObject(JSON.parse(localStorage.getItem('mode')));
        this.modes.forEach((e) => {
          e.name == t.name && this.SelectMode(e);
        });
      } else this.SelectMode(Modes[1]);
      null != localStorage.getItem('theme') && this.SelectGameTheme(localStorage.getItem('theme')), null != localStorage.getItem('useDarkPuck') && this.SetPuckColor('true' == localStorage.getItem('useDarkPuck'));
    },
    Share() {
      navigator.share({ title: "Drop 'n Stop!", text: 'The puck stops here.', url: 'https://dropnstop.games' });
    },
    HandleKeyUp(t) {
      let e;
      switch (
        (this.themes.forEach((t, s) => {
          t.selected && (e = s);
        }),
        t.code)
      ) {
        case 'ArrowRight':
          (e = e == this.themes.length - 1 ? 0 : e + 1), null != e && e >= 0 && this.SelectGameTheme(this.themes[e].name);
          break;
        case 'ArrowLeft':
          (e = 0 == e ? this.themes.length - 1 : e - 1), null != e && e >= 0 && this.SelectGameTheme(this.themes[e].name);
          break;
        case '1':
        case '2':
        case '3':
        case '4':
          this.SelectMode(this.modes[t.key - 1]);
          break;
        case 'Enter':
          this.showYesNo && !this.showEndGame && this.EndGame();
          break;
        case 'Escape':
          this.showYesNo && (this.showYesNo = !1);
          break;
        case 'Space':
          this.isDropping && !this.showEndGame ? this.HandleActionButton(t, 'stop') : (this.isReady || (this.isStopped && !this.showEndGame)) && !this.showEndGame && this.HandleActionButton(t, 'next');
      }
    },
    HandleKeyDown(t) {
      switch (t.code) {
        case 'Space':
          this.isDropping || !this.isReady || this.showEndGame || this.isStopped || this.HandleActionButton(t, 'drop');
          break;
      }
    },
  },
  mounted() {
    window.addEventListener('keyup', this.HandleKeyUp), window.addEventListener('keydown', this.HandleKeyDown), this.GetSettings(), (this.updateInterval = window.setInterval(this.UpdateApp, 1));
  },
  computed: {
    targetValue: function () {
      let t = parseInt(30 + (100 - Number(this.targetHeight)) * (Number(this.dropMaxCount) - Number(this.dropCount))),
        e = (481 - this.targetY) / Number(this.dropCount + 1);
      return (parseInt(t + e) * this.currentMode.speed) / this.modes[0].speed;
    },
    hitsOnOne: function () {
      return this.GetHitsOn(0);
    },
    hitsOnTwo: function () {
      return this.GetHitsOn(1);
    },
    hitsOnThree: function () {
      return this.GetHitsOn(2);
    },
    misses: function () {
      return this.GetMisses();
    },
    highestPossibleScore: function () {
      return this.GetHighestPossibleScore();
    },
    missedAbove: function () {
      return this.GetMissedByDirection('above') + '%';
    },
    missedBelow: function () {
      return this.GetMissedByDirection('below') + '%';
    },
    userLocale: function () {
      return navigator.language || 'en-US';
    },
    instructions: function () {
      let t = this.dropTotalCount + (1 === this.dropTotalCount ? ' drop left' : ' drops left');
      switch (this.dropTotalCount) {
        case 0:
          t = 'Game Over!';
          break;
        case this.startingDropCount:
          t = this.isChromeAndiOSoriPadOS ? "Press and hold the 'drop' button." : "Press and hold the 'drop' button. <br />Or use the space bar.";
          break;
      }
      return t;
    },
    puckHitBottom: function () {
      let t = document.getElementsByTagName('stage')[0].getBoundingClientRect();
      return this.puckY + this.puckHeight >= t.height - 2;
    },
    isChromeAndiOSoriPadOS: function () {
      note('isChromeAndiOSoriPadOS()');
      var t = navigator.userAgent || window.opera,
        e = /CriOS/.test(t) && /iPhone|iPad|iPod/.test(t);
      return (t = t.toLowerCase()), e || (t.includes('firefox') && t.includes('android'));
    },
  },
});
